
</style>
</head>
<body>
    <div class="container">
        <h2>Checkout</h2>
    
        <!-- Address Section -->
        <div class="address-section">
            <h3>Select Address</h3>
            <% user.address.forEach((add) => { %>
                <div class="address-card">
                    <input type="radio" name="address" value="<%= add._id %>" id="address_<%= add._id %>">
                    <label for="address_<%= add._id %>">
                        <span><%= add.street %>, <%= add.city %>, <%= add.state %>, <%= add.pincode %>, <%= add.country %></span>
                    </label>
                    <button class="edit-address-btn" 
                            data-id="<%= add._id %>" 
                            data-street="<%= add.street %>" 
                            data-city="<%= add.city %>" 
                            data-state="<%= add.state %>" 
                            data-pincode="<%= add.pincode %>" 
                            data-country="<%= add.country %>">Edit</button>
                </div>
            <% }); %>
            <button class="add-address-btn">+ Add New Address</button>
        </div>
    
        <div class="modal" id="add-address-modal">
            <div class="modal-content">
                <h3>Add New Address</h3>
                <form id="add-address-form" data-address-id="">
                    <input type="text" name="street" placeholder="Street Address" required />
                    <input type="text" name="city" placeholder="City" required />
                    <input type="text" name="state" placeholder="State" required />
                    <input type="text" name="pincode" placeholder="Pincode" required />
                    <input type="text" name="country" placeholder="Country" required />
                    <button type="submit">Save</button>
                    <button type="button" class="close-modal">Cancel</button>
                </form>
            </div>
        </div>
    
        <!-- Order Summary -->
        <div class="summary-section">
            <h3>Order Summary</h3>
            <% cart.items.forEach((item) => { %>
                <div class="summary-item">
                    <span><%= item.productId.name %>:</span>
                    <span><%= item.quantity %> x ₹<%= item.productId.price %></span>
                </div>
            <% }); %>
            <hr />
    
            <!-- Coupon Section -->
            <div class="coupon-section">
                <input type="text" id="coupon-code" placeholder="Enter coupon code" />
                <button id="apply-coupon-btn" class="apply-coupon-btn">Apply Coupon</button>
                <p id="coupon-message" style="color: green; display: none;">Coupon Applied Successfully</p>
                <p id="coupon-error" style="color: red; display: none;">Invalid Coupon Code</p>
            </div>
            <a href="/coupon" style="text-decoration: none;">Click To Find Coupons !</a>
            <% if (cart.couponDiscount > 0) { %>
                <button id="remove-coupon-btn">Remove Coupon</button>
            <% } %>
    
            <hr />
    
            <!-- Totals -->
            <!-- <div class="summary-item">
                <span>Grand Total:</span>
                <span></span>
            </div> -->
            <div class="summary-item">
                <span>Discount:</span>
                <span>₹<%= cart.discount %></span>
            </div>
            <% if (cart.couponDiscount > 0) { %>
                <div class="summary-item">
                    <span>Coupon Discount:</span>
                    <span>₹</span>
                </div>
            <% } %>
            <div class="summary-item">
                <strong>Total Amount:</strong>
                <strong>₹<%= cart.totalAmount %></strong>
            </div>
        </div>
    
        <!-- Payment Section -->
        <div class="payment-section">
            <h3>Payment Method</h3>
            <div class="payment-method">
                <input type="radio" name="payment" id="Razorpay" value="Razorpay" />
                <label for="Razorpay">Razorpay</label>
                <img style="width: 20%; object-fit: cover;" src="/" alt="">
            </div>
            <div class="payment-method">
                <input type="radio" name="payment" id="Wallet" value="Wallet" />
                <label for="Wallet">Use Wallet</label>
                <p>Balance: 
                    <span style="font-weight: bold;"></span>
                </p>
            </div>
            <div class="payment-method">
                <input type="radio" name="payment" id="COD" value="COD" />
                <label for="COD">Cash on Delivery</label>
            </div>
            <div class="cod-info" style="color: red; display: none;">
                You can only purchase products below ₹2000 with COD.
            </div>
        </div>
    
        <!-- Hidden Inputs -->
        <input type="hidden" name="discount" value="" />
        <input type="hidden" name="couponCode" value="" />
    
        <!-- Submit Button -->
        <button class="place-order-btn" type="submit">Place Order</button>
    </div>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>

__________________________________________________________________________________________________

admin index Page







<%-include('../layout/admin/adminHeader')%>	

                <!-- Begin Page Content -->
                <div class="container-fluid">

                    <!-- Page Heading -->
                    <div class="d-sm-flex align-items-center justify-content-between mb-4">
                        <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
                        <a href="/admin/dashboard" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm"><i
                                class="fas fa-download fa-sm text-white-50"></i> Generate Report</a>
                    </div> 

                    
        
                    <!-- Content Row -->
                    <div class="row">

                        <!-- Earnings (Monthly) Card Example -->
                        <!-- <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-primary shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">
                                                Earnings (Monthly)</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800">$40,000</div>
                                        </div>
                                        <div class="col-auto">
                                            <i class="fas fa-calendar fa-2x text-gray-300"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div> -->

                        <!-- Earnings (Monthly) Card Example -->
                        <!-- <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-success shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">
                                                Earnings (Annual)</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800">$215,000</div>
                                        </div>
                                        <div class="col-auto">
                                            <i class="fas fa-dollar-sign fa-2x text-gray-300"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div> -->

                        <!-- Earnings (Monthly) Card Example -->
                        <!-- <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-info shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">Tasks
                                            </div>
                                            <div class="row no-gutters align-items-center">
                                                <div class="col-auto">
                                                    <div class="h5 mb-0 mr-3 font-weight-bold text-gray-800">50%</div>
                                                </div>
                                                <div class="col">
                                                    <div class="progress progress-sm mr-2">
                                                        <div class="progress-bar bg-info" role="progressbar"
                                                            style="width: 50%" aria-valuenow="50" aria-valuemin="0"
                                                            aria-valuemax="100"></div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="col-auto">
                                            <i class="fas fa-clipboard-list fa-2x text-gray-300"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div> -->

                        <!-- Pending Requests Card Example -->
                        <!-- <div class="col-xl-3 col-md-6 mb-4">
                            <div class="card border-left-warning shadow h-100 py-2">
                                <div class="card-body">
                                    <div class="row no-gutters align-items-center">
                                        <div class="col mr-2">
                                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">
                                                Pending Requests</div>
                                            <div class="h5 mb-0 font-weight-bold text-gray-800">18</div>
                                        </div>
                                        <div class="col-auto">
                                            <i class="fas fa-comments fa-2x text-gray-300"></i>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div> -->
                    </div>

                    <!-- Content Row -->

                    <div class="row">

                        <!-- Area Chart -->
                        <div class="col-xl-8 col-lg-7">
                            <div class="card shadow mb-4">
                                <!-- Card Header - Dropdown -->
                                <div
                                    class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                    <h6 class="m-0 font-weight-bold text-primary">Earnings Overview</h6>
                                    <div class="dropdown no-arrow">
                                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                        </a>
                                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                                            aria-labelledby="dropdownMenuLink">
                                            <div class="dropdown-header">Dropdown Header:</div>
                                            <a class="dropdown-item" href="#">Action</a>
                                            <a class="dropdown-item" href="#">Another action</a>
                                            <div class="dropdown-divider"></div>
                                            <a class="dropdown-item" href="#">Something else here</a>
                                        </div>
                                    </div>
                                </div>
                                <!-- Card Body -->
                                <div class="card-body">
                                    <div class="chart-area">
                                        <canvas id="myAreaChart"></canvas>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Pie Chart -->
                        <!-- <div class="col-xl-4 col-lg-5">
                            <div class="card shadow mb-4"> -->
                                <!-- Card Header - Dropdown -->
                                <!-- <div
                                    class="card-header py-3 d-flex flex-row align-items-center justify-content-between">
                                    <h6 class="m-0 font-weight-bold text-primary">Revenue Sources</h6>
                                    <div class="dropdown no-arrow">
                                        <a class="dropdown-toggle" href="#" role="button" id="dropdownMenuLink"
                                            data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                            <i class="fas fa-ellipsis-v fa-sm fa-fw text-gray-400"></i>
                                        </a>
                                        <div class="dropdown-menu dropdown-menu-right shadow animated--fade-in"
                                            aria-labelledby="dropdownMenuLink">
                                            <div class="dropdown-header">Dropdown Header:</div>
                                            <a class="dropdown-item" href="#">Action</a>
                                            <a class="dropdown-item" href="#">Another action</a>
                                            <div class="dropdown-divider"></div>
                                            <a class="dropdown-item" href="#">Something else here</a>
                                        </div>
                                    </div>
                                </div> -->
                                <!-- Card Body -->
                                <!-- <div class="card-body">
                                    <div class="chart-pie pt-4 pb-2">
                                        <canvas id="myPieChart"></canvas>
                                    </div>
                                    <div class="mt-4 text-center small">
                                        <span class="mr-2">
                                            <i class="fas fa-circle text-primary"></i> Direct
                                        </span>
                                        <span class="mr-2">
                                            <i class="fas fa-circle text-success"></i> Social
                                        </span>
                                        <span class="mr-2">
                                            <i class="fas fa-circle text-info"></i> Referral
                                        </span>
                                    </div>
                                </div> -->
                            </div>
                        </div>
                    </div>

                    <!-- Content Row -->
                    <div class="row">

                        <!-- Content Column -->
                        <div class="col-lg-6 mb-4">

                            <!-- Project Card Example -->
                            <!-- <div class="card shadow mb-4">
                                <div class="card-header py-3">
                                    <h6 class="m-0 font-weight-bold text-primary">Projects</h6>
                                </div>
                                <div class="card-body">
                                    <h4 class="small font-weight-bold">Server Migration <span
                                            class="float-right">20%</span></h4>
                                    <div class="progress mb-4">
                                        <div class="progress-bar bg-danger" role="progressbar" style="width: 20%"
                                            aria-valuenow="20" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <h4 class="small font-weight-bold">Sales Tracking <span
                                            class="float-right">40%</span></h4>
                                    <div class="progress mb-4">
                                        <div class="progress-bar bg-warning" role="progressbar" style="width: 40%"
                                            aria-valuenow="40" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <h4 class="small font-weight-bold">Customer Database <span
                                            class="float-right">60%</span></h4>
                                    <div class="progress mb-4">
                                        <div class="progress-bar" role="progressbar" style="width: 60%"
                                            aria-valuenow="60" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <h4 class="small font-weight-bold">Payout Details <span
                                            class="float-right">80%</span></h4>
                                    <div class="progress mb-4">
                                        <div class="progress-bar bg-info" role="progressbar" style="width: 80%"
                                            aria-valuenow="80" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                    <h4 class="small font-weight-bold">Account Setup <span
                                            class="float-right">Complete!</span></h4>
                                    <div class="progress">
                                        <div class="progress-bar bg-success" role="progressbar" style="width: 100%"
                                            aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"></div>
                                    </div>
                                </div>
                            </div> -->

                            <!-- Color System -->
                            <!-- <div class="row">
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-primary text-white shadow">
                                        <div class="card-body">
                                            Primary
                                            <div class="text-white-50 small">#4e73df</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-success text-white shadow">
                                        <div class="card-body">
                                            Success
                                            <div class="text-white-50 small">#1cc88a</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-info text-white shadow">
                                        <div class="card-body">
                                            Info
                                            <div class="text-white-50 small">#36b9cc</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-warning text-white shadow">
                                        <div class="card-body">
                                            Warning
                                            <div class="text-white-50 small">#f6c23e</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-danger text-white shadow">
                                        <div class="card-body">
                                            Danger
                                            <div class="text-white-50 small">#e74a3b</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-secondary text-white shadow">
                                        <div class="card-body">
                                            Secondary
                                            <div class="text-white-50 small">#858796</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-light text-black shadow">
                                        <div class="card-body">
                                            Light
                                            <div class="text-black-50 small">#f8f9fc</div>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-lg-6 mb-4">
                                    <div class="card bg-dark text-white shadow">
                                        <div class="card-body">
                                            Dark
                                            <div class="text-white-50 small">#5a5c69</div>
                                        </div>
                                    </div>
                                </div>
                            </div> -->

                        </div>

                        <div class="col-lg-6 mb-4">

                            <!-- Illustrations -->
                            <!-- <div class="card shadow mb-4">
                                <div class="card-header py-3">
                                    <h6 class="m-0 font-weight-bold text-primary">Illustrations</h6>
                                </div>
                                <div class="card-body">
                                    <div class="text-center">
                                        <img class="img-fluid px-3 px-sm-4 mt-3 mb-4" style="width: 25rem;"
                                            src="/adminHome/img/undraw_posting_photo.svg" alt="...">
                                    </div>
                                    <p>Add some quality, svg illustrations to your project courtesy of <a
                                            target="_blank" rel="nofollow" href="https://undraw.co/">unDraw</a>, a
                                        constantly updated collection of beautiful svg images that you can use
                                        completely free and without attribution!</p>
                                    <a target="_blank" rel="nofollow" href="https://undraw.co/">Browse Illustrations on
                                        unDraw &rarr;</a>
                                </div>
                            </div> -->

                            <!-- Approach -->
                            <!-- <div class="card shadow mb-4">
                                <div class="card-header py-3">
                                    <h6 class="m-0 font-weight-bold text-primary">Development Approach</h6>
                                </div>
                                <div class="card-body">
                                    <p>SB Admin 2 makes extensive use of Bootstrap 4 utility classes in order to reduce
                                        CSS bloat and poor page performance. Custom CSS classes are used to create
                                        custom components and custom utility classes.</p>
                                    <p class="mb-0">Before working with this theme, you should become familiar with the
                                        Bootstrap framework, especially the utility classes.</p>
                                </div>
                            </div> -->

                        </div>
                    </div>

                </div>

            </div>
            <footer class="sticky-footer bg-white">
                <div class="container my-auto">
                    <div class="copyright text-center my-auto">
                        <!-- <span>Copyright &copy; Your Website 2021</span> -->
                    </div>
                </div>
            </footer>
            
        </div>

    </div>
    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="login.html">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <script src="/adminHome/vendor/jquery/jquery.min.js"></script>
    <script src="/adminHome/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script src="/adminHome/vendor/jquery-easing/jquery.easing.min.js"></script>


    <script src="/adminHome/js/sb-admin-2.min.js"></script>

    <script src="/adminHome/vendor/chart.js/Chart.min.js"></script>
    <script src="/adminHome/js/demo/chart-area-demo.js"></script>
    <script src="/adminHome/js/demo/chart-pie-demo.js"></script>

</body>
</html>

__________________________________________________________________________________________________


admin dashboard code

const Admin = require('../../models/admin/adminModel'); 
const bcrypt = require('bcrypt'); 
const User = require('../../models/user/userModel'); 
const Order=require('../../models/user/orderMoel')
const Product=require('../../models/admin/productModel')
const PDFDocument = require('pdfkit');
const ExcelJS = require('exceljs');
const fs = require('fs');


const adminLoginPage = async (req, res) => {
    res.render('admin/adminLogin');
};

// const admindashboard=async (req,res) => {
//   let { filterType, startDate, endDate } = req.query;
//   filterType = filterType || 'daily';

//   const now = new Date();
//   const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
//   const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);

//   switch(filterType) {
//     case 'daily':
//       dateQuery = {
//         createdAt: {
//           $gte: todayStart,
//           $lte: todayEnd
//         }
//       };
//       break;

//     case 'weekly':
//       const weekStart = new Date(todayStart);
//       weekStart.setDate(todayStart.getDate() - todayStart.getDay());
//       const weekEnd = new Date(todayEnd);
//       weekEnd.setDate(weekStart.getDate() + 6);
//       dateQuery = {
//         createdAt: {
//           $gte: weekStart,
//           $lte: weekEnd
//         }
//       };
//       break;

//     case 'yearly':
//       const yearStart = new Date(now.getFullYear(), 0, 1);
//       const yearEnd = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);
//       dateQuery = {
//         createdAt: {
//           $gte: yearStart,
//           $lte: yearEnd
//         }
//       };
//       break;

//     case 'custom':
//       if (startDate && endDate) {
//         const customStart = new Date(startDate);
//         const customEnd = new Date(endDate);
//         customEnd.setHours(23, 59, 59, 999);
//         dateQuery = {
//           createdAt: {
//             $gte: customStart,
//             $lte: customEnd
//           }
//         };
//       } else {
//         dateQuery = {
//           createdAt: {
//             $gte: todayStart,
//             $lte: todayEnd
//           }
//         };
//       }
//       break;
//   }

//   const dashboardData={
//     filterType,
//     startDate: startDate || '',
//     endDate: endDate || '',
//   }


//     res.render('admin/adminIndex',dashboardData)
// }


// const admindashboard = async (req, res) => {
//   try {
//     let { filterType, startDate, endDate } = req.query;
//     filterType = filterType || 'daily';

//     const now = new Date();
//     const todayStart = new Date(now.getFullYear(), now.getMonth(), now.getDate());
//     const todayEnd = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);

//     let dateQuery = {};

//     switch (filterType) {
//       case 'daily':
//         dateQuery = {
//           createdAt: { $gte: todayStart, $lte: todayEnd },
//         };
//         break;

//       case 'weekly':
//         const weekStart = new Date(todayStart);
//         weekStart.setDate(todayStart.getDate() - todayStart.getDay());
//         const weekEnd = new Date(todayEnd);
//         weekEnd.setDate(weekStart.getDate() + 6);
//         dateQuery = {
//           createdAt: { $gte: weekStart, $lte: weekEnd },
//         };
//         break;

//       case 'yearly':
//         const yearStart = new Date(now.getFullYear(), 0, 1);
//         const yearEnd = new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999);
//         dateQuery = {
//           createdAt: { $gte: yearStart, $lte: yearEnd },
//         };
//         break;

//       case 'custom':
//         if (startDate && endDate) {
//           const customStart = new Date(startDate);
//           const customEnd = new Date(endDate);
//           customEnd.setHours(23, 59, 59, 999);
//           dateQuery = {
//             createdAt: { $gte: customStart, $lte: customEnd },
//           };
//         } else {
//           dateQuery = {
//             createdAt: { $gte: todayStart, $lte: todayEnd },
//           };
//         }
//         break;
//     }

//     const ordersData = await Order.aggregate([
//       { $match: dateQuery },
//       {
//         $facet: {
//           totals: [
//             {
//               $group: {
//                 _id: null,
//                 totalAmount: { $sum: '$total' },
//                 totalOrders: { $sum: 1 },
//                 totalCouponDiscount: { $sum: { $ifNull: ['$couponDiscount', 0] } },
//                 totalDiscountPercentage: {
//                   $sum: {
//                     $multiply: [
//                       '$total',
//                       { $divide: [{ $ifNull: ['$discountPercentage', 0] }, 100] },
//                     ],
//                   },
//                 },
//               },
//             },
//           ],
//           dailyStats: [
//             {
//               $group: {
//                 _id: {
//                   $dateToString: {
//                     format: '%Y-%m-%d',
//                     date: '$createdAt',
//                     timezone: 'Asia/Kolkata',
//                   },
//                 },
//                 dailyAmount: { $sum: '$total' },
//                 dailyCouponDiscount: { $sum: { $ifNull: ['$couponDiscount', 0] } },
//                 dailyDiscountPercentage: {
//                   $sum: {
//                     $multiply: [
//                       '$total',
//                       { $divide: [{ $ifNull: ['$discountPercentage', 0] }, 100] },
//                     ],
//                   },
//                 },
//               },
//             },
//             { $sort: { _id: 1 } },
//           ],
//           statusCounts: [
//             { $unwind: '$products' },
//             {
//               $group: {
//                 _id: '$products.orderStatus',
//                 count: { $sum: 1 },
//               },
//             },
//           ],
//         },
//       },
//     ]);

//     const aggregateData = ordersData[0];
//     const totals = aggregateData.totals[0] || {
//       totalAmount: 0,
//       totalOrders: 0,
//       totalCouponDiscount: 0,
//       totalDiscountPercentage: 0,
//     };

//     const orderStatusMap = {
//       pending: 0,
//       shipped: 0,
//       Delivered: 0,
//       'request return': 0,
//       returned: 0,
//       'request cancellation': 0,
//       cancelled: 0,
//     };

//     aggregateData.statusCounts.forEach((status) => {
//       if (orderStatusMap.hasOwnProperty(status._id)) {
//         orderStatusMap[status._id] = status.count;
//       }
//     });

//     const overallOrderAmount = aggregateData.dailyStats.map((day) => ({
//       date: day._id,
//       amount: parseFloat(day.dailyAmount.toFixed(2)),
//     }));

//     const overallDiscount = aggregateData.dailyStats.map((day) => ({
//       date: day._id,
//       amount: parseFloat(
//         (day.dailyCouponDiscount + day.dailyDiscountPercentage).toFixed(2)
//       ),
//     }));

//     const totalDiscount = totals.totalCouponDiscount + totals.totalDiscountPercentage;

//     // Top Products Aggregation
//     const topProducts = await Order.aggregate([
//       { $match: dateQuery },
//       { $unwind: "$products" },
//       { $group: { _id: "$products.productId", totalSold: { $sum: "$products.quantity" } } },
//       { $sort: { totalSold: -1 } },
//       { $limit: 5 },
//       {
//         $lookup: {
//           from: "products",
//           localField: "_id",
//           foreignField: "_id",
//           as: "product",
//         },
//       },
//       { $unwind: "$product" },
//       {
//         $project: {
//           productName: "$product.name",
//           totalSold: 1,
//           image: "$product.image",  // Make sure image field is present
//           product: 1,
//         },
//       },
//     ]);

//     // Top Categories Aggregation
//     const topCategories = await Order.aggregate([
//       { $match: dateQuery },
//       { $unwind: "$products" },
//       {
//         $lookup: {
//           from: "products",
//           localField: "products.productId",
//           foreignField: "_id",
//           as: "productDetails",
//         },
//       },
//       { $unwind: "$productDetails" },
//       { $group: { _id: "$productDetails.category", totalSold: { $sum: "$products.quantity" } } },
//       { $sort: { totalSold: -1 } },
//       { $limit: 5 },
//       {
//         $lookup: {
//           from: "categories",
//           localField: "_id",
//           foreignField: "_id",
//           as: "category",
//         },
//       },
//       { $unwind: "$category" },
//       {
//         $project: {
//           categoryName: "$category.name",
//           totalSold: 1,
//         },
//       },
//     ]);

//     const dashboardData = {
//       filterType,
//       startDate: startDate || '',
//       endDate: endDate || '',
//       totalAmount: parseFloat(totals.totalAmount.toFixed(2)),
//       totalDiscount: parseFloat(totalDiscount.toFixed(2)),
//       salesCount: totals.totalOrders,
//       orderStatusMap,
//       overallOrderAmount,
//       overallDiscount,
//       topProducts,
//       topCategories,
//     };

//     console.log('Dashboard Data:', dashboardData);

//     res.render('admin/adminIndex', dashboardData);
//   } catch (error) {
//     console.error('Error loading dashboard:', error);
//     res.status(500).send('Internal Server Error');
//   }
// };



const admindashboard = async (req, res) => {
  try {
        // Aggregation for top-selling Products
    const topProducts = await Order.aggregate([
      { $unwind: "$productItems" },
      {
          $group: {
              _id: "$productItems.productId",
              totalSales: { $sum: "$productItems.quantity" }, 
          },
      },
      { $sort: { totalSales: -1 } }, 
      { $limit: 10 }, 
      {
          $lookup: {
              from: "products", 
              localField: "_id",
              foreignField: "_id", 
              as: "productDetails",
          },
      },
      { $unwind: "$productDetails" }, 
      {
          $project: {
              _id: 1,
              totalSales: 1,
              productName: "$productDetails.productName",
              productImage: "$productDetails.image",
              productPrice: "$productDetails.price",
          },
      },
  ]);
  

    // Aggregation for top-selling categories
    const topCategories = await Order.aggregate([
      { $unwind: "$productItems" },
      {
        $lookup: {
          from: "products",
          localField: "productItems.productId",
          foreignField: "_id",
          as: "productDetails",
        },
      },
      { $unwind: "$productDetails" },
      {
        $group: {
          _id: "$productDetails.category",
          totalSales: { $sum: "$productItems.quantity" },
        },
      },
      { $sort: { totalSales: -1 } },
      { $limit: 10 },
      {
        $lookup: {
          from: "categories",
          localField: "_id",
          foreignField: "_id",
          as: "categoryDetails",
        },
      },
      { $unwind: "$categoryDetails" },
      {
        $project: {
          _id: 1,
          totalSales: 1,
          categoryName: "$categoryDetails.name",
        },
      },
    ]);

     res.render('admin/adminIndex', {
      topProducts,
      topCategories,
      
    });
    return;
  } catch (error) {
    console.error('Error loading dashboard:', error);
    res.status(500).send('Internal Server Error');
  }
};



const admin='admin@gmail.com'
const adminPassword='1234'

const adminHome = async (req, res) => {
    const { email, password } = req.body;


    
    const fieldErrors = {};
    if (!email || !password) {
        if (!email) fieldErrors.email = 'Please enter a valid email.';
        if (!password) fieldErrors.password = 'Please enter your password.';
        return res.status(400).json({ fieldErrors })
    }

    try {
        // const admin = await Admin.findOne({ email });
        // if (!admin) {
        //     fieldErrors.email = 'Incorrect email or password';
        //     return res.status(401).json({ fieldErrors });
        // }
        

        // const isMatch = await bcrypt.compare(password, admin.password);
        // if (!isMatch) {
        //     fieldErrors.password = 'Incorrect email or password';
        //     return res.status(401).json({ fieldErrors });
        // }

        if (email===admin&&password===adminPassword) {
            req.session.admin=true;
            res.status(200).json({ redirectUrl: '/admin/dashboard' });
        }
    } catch (error) {
        console.error('Error during admin login:', error);
        res.status(500).json({ message: 'Server error. Please try again later.' });
    }
};
const getUsersList = async (req, res) => {
    try {
        const limit = 5;
        const page = parseInt(req.query.page) || 1;

        const totalUsers = await User.countDocuments();
        const totalPages = Math.ceil(totalUsers / limit);

        const users = await User.find()
            .skip((page - 1) * limit) 
            .limit(limit);

        res.render('admin/usersList', { 
            users, 
            currentPage: page, 
            totalPages 
        });
    } catch (error) {
        console.error('Error fetching users:', error);
        res.status(500).send('Server Error');
    }
};


const changeStatus = async (req, res) => {
    const { userId } = req.params;
    const { status } = req.body;

    try {
        const user = await User.findById(userId);
        if (!user) {
            return res.status(404).json({ message: 'User not found' });
        }

        user.status = status;  

        await user.save(); 

        res.status(200).json({ success: true, status: user.status });
    } catch (error) {
        console.error('Error changing user status:', error);
        res.status(500).json({ message: 'Failed to change user status' });
    }
};


const adminLogout=async (req,res) => {
    req.session.destroy()
    res.redirect('/admin/adminLoginPage')
}




// Generate Sales Report
const generateReport = async (req, res) => {
    console.log('inside generate report')
    try {
        const { reportType, startDate, endDate, downloadFormat } = req.body;

        console.log('req.body',req.body)
        // Define date range based on report type
        let dateFilter = {};
        const now = new Date();

        switch (reportType) {
            case 'daily':
                dateFilter = {
                    createdAt: {
                        $gte: new Date(now.setHours(0, 0, 0, 0)),
                        $lte: new Date(now.setHours(23, 59, 59, 999)),
                    },
                };
                break;
            case 'weekly':
                const weekStart = new Date(now.setDate(now.getDate() - now.getDay()));
                dateFilter = {
                    createdAt: {
                        $gte: new Date(weekStart.setHours(0, 0, 0, 0)),
                        $lte: new Date(now.setHours(23, 59, 59, 999)),
                    },
                };
                break;
            case 'yearly':
                dateFilter = {
                    createdAt: {
                        $gte: new Date(now.getFullYear(), 0, 1),
                        $lte: new Date(now.getFullYear(), 11, 31, 23, 59, 59, 999),
                    },
                };
                break;
            case 'custom':
                // if (!startDate || !endDate) {
                //     return res.status(400).json({ error: 'Start date and end date are required for custom range' });
                // }
                dateFilter = {
                    createdAt: {
                        $gte: new Date(startDate),
                        $lte: new Date(endDate),
                    },
                };
                break;
            default:
                return res.status(400).json({ error: 'Invalid report type' });
        }

        console.log('date filter',dateFilter)
        
        // Fetch orders based on date filter
        const orders = await Order.find(dateFilter)
            .populate('userId', 'name email')
            .populate('productItems.productId', 'productName');

            console.log('oreders after report',orders)
        if (!orders.length) {
            return res.status(404).json({ error: 'No orders found for the selected period' });
        }

        // Calculate summary data
        const totalSales = orders.reduce((sum, order) => sum + (order.totalPrice || 0), 0);
        const totalOrders = orders.length;
        const totalItemsSold = orders.reduce((sum, order) => sum + (order.totalQuantity || 0), 0);

        // Generate report based on download format
        if (downloadFormat === 'pdf') {
            const doc = new PDFDocument();
            let buffers = [];
            doc.on('data', buffers.push.bind(buffers));
            doc.on('end', () => {
                const pdfData = Buffer.concat(buffers);
                res.setHeader('Content-Disposition', `attachment; filename="sales_report_${reportType}_${Date.now()}.pdf"`);
                res.setHeader('Content-Type', 'application/pdf');
                res.send(pdfData);
            });

            // PDF Content
            doc.fontSize(20).text(`Sales Report - ${reportType}`, { align: 'center' });
            doc.moveDown();
            doc.fontSize(12).text(`Period: ${reportType === 'custom' ? `${startDate} to ${endDate}` : reportType}`);
            doc.text(`Total Orders: ${totalOrders}`);
            doc.text(`Total Items Sold: ${totalItemsSold}`);
            doc.text(`Total Sales: ₹${totalSales.toFixed(2)}`);
            doc.moveDown();

            // Order Details Table
            doc.text('Order Details:', { underline: true });
            orders.forEach((order, index) => {
                doc.moveDown(0.5);
                doc.text(`Order #${index + 1}`);
                doc.text(`Order ID: ${order._id}`);
                doc.text(`User: ${order.userId.name} (${order.userId.email})`);
                doc.text(`Total: ₹${order.totalPrice || 0}`);
                doc.text(`Status: ${order.status}`);
                doc.text(`Payment: ${order.paymentMethod} (${order.paymentStatus})`);
                doc.text('Items:');
                order.productItems.forEach(item => {
                    doc.text(`- ${item.productName} (Qty: ${item.quantity}, Price: ₹${item.total})`);
                });
            });

            doc.end();
        } else if (downloadFormat === 'excel') {
            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('Sales Report');

            // Add headers
            worksheet.columns = [
                { header: 'Order ID', key: 'orderId', width: 25 },
                { header: 'User Name', key: 'userName', width: 20 },
                { header: 'Email', key: 'email', width: 25 },
                { header: 'Date', key: 'date', width: 15 },
                { header: 'Total', key: 'total', width: 15 },
                { header: 'Status', key: 'status', width: 15 },
                { header: 'Payment Method', key: 'paymentMethod', width: 15 },
                { header: 'Items', key: 'items', width: 40 },
            ];

            // Add summary
            worksheet.addRow(['Summary']);
            worksheet.addRow(['Total Orders', totalOrders]);
            worksheet.addRow(['Total Items Sold', totalItemsSold]);
            worksheet.addRow(['Total Sales', `₹${totalSales.toFixed(2)}`]);
            worksheet.addRow([]);

            // Add order data
            orders.forEach(order => {
                const items = order.productItems.map(item => `${item.productName} (Qty: ${item.quantity})`).join(', ');
                worksheet.addRow({
                    orderId: order._id.toString(),
                    userName: order.userId.name,
                    email: order.userId.email,
                    date: order.createdAt.toISOString().split('T')[0],
                    total: `₹${order.totalPrice || 0}`,
                    status: order.status,
                    paymentMethod: order.paymentMethod,
                    items: items,
                });
            });

            // Generate Excel file
            res.setHeader(
                'Content-Disposition',
                `attachment; filename="sales_report_${reportType}_${Date.now()}.xlsx"`
            );
            res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
            await workbook.xlsx.write(res);
            res.end();
        } else {
            return res.status(400).json({ error: 'Invalid download format' });
        }
    } catch (error) {
        console.error('Error generating report:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
};


module.exports = {
    adminLoginPage,
    admindashboard,
    adminHome,
    getUsersList,
    changeStatus,
    adminLogout,
    generateReport
};
