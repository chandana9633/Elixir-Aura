<section class="product-page">
    <div class="container">
        <div class="product-control">
        </div>
        <div class="row">
            <div class="col-lg-6">
                <div class="product-slider owl-carousel">
                    <% pro.image.forEach((img, index) => { %>
                        <div class="product-img">
                            <figure>
                                <img class="zoomable-image" src="/uploads/<%= img %>" alt="Product Image <%= index + 1 %>">
                                <div class="p-status">new</div>
                            </figure>
                        </div>
                    <% }) %>
                </div>
            </div>

            <div class="col-lg-6">
                <div class="product-content">
                    <h2><%= pro.name %></h2>
                    
                    <div class="price-section">
                        <% if (categoryOffer && categoryOffer.discountPercentage > 0) { %>
                            <div class="original-price" style="text-decoration: line-through; color: grey; font-size: 24px; font-weight: bold;">
                                <span class="currency-symbol">₹</span>
                                <span class="price"><%= pro.price %></span>
                            </div>
                    
                            <div class="discounted-price" style="font-size: 24px; font-weight: bold; color: #148a12;">
                                <span class="currency-symbol">₹</span>
                                <span class="price">
                                    <%= Math.round(pro.price - (pro.price * (categoryOffer.discountPercentage / 100))) %>
                                </span>
                                <span style="color: grey; font-size: 16px;">
                                    (<%= categoryOffer.discountPercentage %>% OFF)
                                </span>
                            </div>
                        <% } else { %>
                            <div class="original-price" style="font-size: 24px; font-weight: bold;">
                                <span class="currency-symbol">₹</span>
                                <span class="price"><%= pro.price %></span>
                            </div>
                        <% } %>
                    </div>
                    
                    
                    <p><%= pro.description %></p>

                    <ul class="tags">
                        <li><span>Category :</span> <%= pro.category.name %></li>
                    </ul>

                    <ul class="tags">
                        <li><span>Stock :</span> <%= pro.stock %></li>
                    </ul>

                    <% if (pro.stock <= 0) { %>
                        <div class="out-of-stock" style="color: red; font-weight: bold;">Out of Stock</div>
                    <% } else { %>
                        <div class="button-container" style="display: flex; gap: 10px; align-items: center;">
                            <button onclick="addToCart('<%- pro._id %>')" class="primary-btn pc-btn">Add to cart</button>
                            <div class="wishlist-icon" style="cursor: pointer;" data-product-id="<%- pro._id %>">
                                <i class="fa fa-heart-o" style="color: #ff6f61; font-size: 24px;"></i>
                            </div>
                        </div>
                    <% } %>

                </div>
            </div>
        </div>
    </div>
</section>

---------------------------------------------------------------product page section-------------------------------------------------------------









<%-include('../layout/admin/adminHeader')%>	


<style>
    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .row {
        display: flex;
        flex-wrap: wrap;
        margin: -15px;
    }

    .col-md-4 {
        flex: 0 0 33.333333%;
        max-width: 33.333333%;
        padding: 15px;
    }

    h3 {
        margin-bottom: 20px;
        font-size: 1.5rem;
        color: #040404;
        font-weight: 700;
        text-transform: uppercase;
    }

    .product-list,
    .category-list,
    .brand-list {
        list-style-type: none;
        padding: 0;
        margin: 0;
    }

    .product-item,
    .category-item,
    .brand-item {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .product-item {
        display: flex;
        align-items: center;
    }

    .product-image img {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
        margin-right: 15px;
    }

    .product-info h4,
    .category-item h4,
    .brand-item h4 {
        margin: 0 0 10px;
        font-size: 1.1rem;
        color: #007bff;
    }

    .price {
        font-weight: bold;
        color: #28a745;
    }

    .original-price {
        text-decoration: line-through;
        color: #6c757d;
        margin-left: 10px;
        font-size: 0.9em;
    }

    .chart-controls {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        max-width: 600px;
        margin: 20px auto;
    }

    .chart-controls h2 {
        color: #333;
        margin-bottom: 20px;
        text-align: center;
        font-size: 1.8rem;
    }

    .control-group {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .select-wrapper {
        flex: 0 0 48%;
    }

    .select-wrapper label {
        display: block;
        margin-bottom: 5px;
        color: #555;
        font-weight: bold;
    }

    .styled-select {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        background-color: white;
        font-size: 1rem;
        color: #333;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='12' height='12' fill='%23333' viewBox='0 0 16 16'%3E%3Cpath d='M7.247 11.14L2.451 5.658C1.885 5.013 2.345 4 3.204 4h9.592a1 1 0 0 1 .753 1.659l-4.796 5.48a1 1 0 0 1-1.506 0z'/%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: calc(100% - 10px) center;
    }

    .date-range-picker {
        display: flex;
        justify-content: space-between;
        margin-bottom: 20px;
    }

    .date-input {
        flex: 0 0 48%;
    }

    .date-input label {
        display: block;
        margin-bottom: 5px;
        color: #555;
        font-weight: bold;
    }

    .date-input input[type="date"] {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 1rem;
        color: #333;
    }

    .update-btn {
        display: block;
        width: 100%;
        padding: 12px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    .update-btn:hover {
        background-color: #0056b3;
    }

    /* Profit Over Time Button Style */
    #update-profit-chart {
        display: block;
        width: 100%;
        padding: 12px;
        background-color: #28a745;
        color: white;
        border: none;
        border-radius: 4px;
        font-size: 1rem;
        font-weight: bold;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin-top: 15px;
    }

    #update-profit-chart:hover {
        background-color: #218838;
    }

    @media (max-width: 480px) {

        .control-group,
        .date-range-picker {
            flex-direction: column;
        }

        .select-wrapper,
        .date-input {
            flex: 0 0 100%;
            margin-bottom: 15px;
        }

        .col-md-4 {
            flex: 0 0 100%;
            max-width: 100%;
            padding: 10px;
        }

        .chart-controls h2 {
            font-size: 1.4rem;
        }
    }
</style>

<!-- <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<!-- Begin Page Content -->
<div class="container-fluid">
    <!-- Generate Report Button -->
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <h1 class="h3 mb-0 text-gray-800">Dashboard</h1>
        <a href="#" class="d-none d-sm-inline-block btn btn-sm btn-primary shadow-sm" data-toggle="modal"
            data-target="#reportModal">
            <i class="fas fa-download fa-sm text-white-50"></i> Generate Report
        </a>
    </div>


    <div class="row my-4">
        <form action="/admin/dashboard" method="GET" class="d-flex align-items-center">
            Custom Date Range
            <div id="custom-date" class="align-items-center mt-2 d-none">
                <label for="startDate" class="me-2">From:</label>
                <input type="date" name="startDate" id="startDate" value="" class="form-control me-3 rounded-0 border">
                <label for="endDate" class="me-2">To:</label>
                <input type="date" name="endDate" id="endDate" value="" class="form-control me-3 rounded-0 border">
            </div>
            <select name="filterType" class="form-select me-3 rounded-0 border" style="width: 200px; height: 45px;">
                <option value="daily">Daily</option>
                <option value="weekly">Weekly</option>
                <option value="yearly">Yearly</option>
                <option value="custom">Custom Date</option>
            </select>
            <button type="submit" class="btn btn-success text-light rounded-0 border me-4">Filter</button>
        </form>
        
    </div> 


    <div class="chart col-lg-12 d-flex">
        <div class="col-lg-7">
            <canvas id="lineChart"></canvas>
        </div>
        <div class="col-lg-5 py-5 ps-5">
            <h3 class="mx-5 my-3 text-decoration-underline">Total Sales:</h3>
            <h4>Total orders: </h4>
            <h4>Total Revenue: ₹ </h4>
        </div>
    </div>

     <!-- Modal Structure  -->
    <div class="modal fade" id="reportModal" tabindex="-1" role="dialog" aria-labelledby="reportModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="reportModalLabel">Generate Sales Report</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Report Options -->
                    <form id="reportForm">
                        <div class="form-group">
                            <label for="reportType">Report Type</label>
                            <select class="form-control" id="reportType">
                                <option value="daily">Daily</option>
                                <option value="weekly">Weekly</option>
                                <option value="yearly">Yearly</option>
                                <option value="custom">Custom Date Range</option>
                            </select>
                        </div>
                        <div class="form-group" id="customDateRange" style="display:none;">
                            <label for="startDate">Start Date</label>
                            <input type="date" class="form-control" id="startDate">
                            <label for="endDate" class="mt-2">End Date</label>
                            <input type="date" class="form-control" id="endDate">
                        </div>
                        <div class="form-group">
                            <label for="filterType">Filter By</label>
                            <select class="form-control" id="filterType">
                                <option value="day">1 Day</option>
                                <option value="week">1 Week</option>
                                <option value="month">1 Month</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="downloadFormat">Download Format</label>
                            <select class="form-control" id="downloadFormat">
                                <option value="pdf">PDF</option>
                                <option value="excel">Excel</option>
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="generateReport">Generate Report</button>
                </div>
            </div>
        </div>
    </div>
  
    <!-- <canvas id="ordersChart" width="200" height="100"></canvas> -->

    <!-- <div class="chart-container">
        <canvas id="orderChart" width="400" height="200"></canvas>
         <canvas id="categoryChart" ></canvas> 
     </div> -->

     <div class="chart-container">
        <canvas id="orderChart" style="width: 400px; height: 200px;"></canvas>
        <!-- <canvas id="categoryChart"></canvas> -->
    </div>


  <!-- Content Row -->
  <div class="container">
    <div class="row">
        <!-- Top 5 Selling Products -->
        <div class="col-md-4">
            <h3>Top 5 Selling Products</h3>
            <ul class="product-list">
                <% if (topProducts && topProducts.length > 0) { %>
                    <% topProducts.forEach(product => { %>
                        <li class="product-item">
                            <div class="product-image">
                                <img src="/uploads/<%= product.productImage[0] %>" alt="<%= product.productName %>">
                            </div>
                            <div class="product-info">
                                <h4><%= product.productName %></h4>
                                <p>Sold: <%= product.totalSales %> units</p>
                                <p class="price">Price: ₹<%= product.productPrice || '0.00' %></p>
                            </div>
                        </li>
                    <% }); %>
                <% } else { %>
                    <li>No top-selling products available.</li>
                <% } %>
            </ul>
            
        </div>

        <!-- Top Selling Categories -->
        <div class="col-md-4">
            <h3>Top Selling Categories</h3>
            <ul class="category-list">
                <% if (topCategories && topCategories.length > 0) { %>
                    <% topCategories.forEach(category => { %>
                        <li class="category-item">
                            <h4><%= category.categoryName %></h4>
                            <p>Sold: <%= category.totalSales %> units</p>
                        </li>
                    <% }); %>
                <% } else { %>
                    <li>No top-selling categories available.</li>
                <% } %>
            </ul>
        </div>
    </div>
</div>


    <!-- Scroll to Top Button-->
    <a class="scroll-to-top rounded" href="#page-top">
        <i class="fas fa-angle-up"></i>
    </a>

    <!-- Logout Modal-->
    <div class="modal fade" id="logoutModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel"
        aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Ready to Leave?</h5>
                    <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">×</span>
                    </button>
                </div>
                <div class="modal-body">Select "Logout" below if you are ready to end your current session.</div>
                <div class="modal-footer">
                    <button class="btn btn-secondary" type="button" data-dismiss="modal">Cancel</button>
                    <a class="btn btn-primary" href="/admin/logout">Logout</a>
                </div>
            </div>
        </div>
    </div>

    <script src="/vendor/jquery/jquery.min.js"></script>
    <script src="/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>

    <script src="/js/sb-admin-2.min.js"></script>
    <!-- <script src="https://cdn.jsdelivr.net/npm/chart.js"></script> -->

    <!-- removed by javed -->
<!-- 
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const overallOrderAmount = JSON.parse();
            const orderDates = overallOrderAmount.map(entry => entry.date);
            const orderAmounts = overallOrderAmount.map(entry => entry.amount);
    
            const lineChartCtx = document.getElementById("lineChart").getContext("2d");
            new Chart(lineChartCtx, {
                type: "line",
                data: {
                    labels: orderDates,
                    datasets: [{
                        label: "Total Orders Amount",
                        data: orderAmounts,
                        borderColor: "rgba(75, 192, 192, 1)",
                        backgroundColor: "rgba(75, 192, 192, 0.2)",
                        fill: true,
                        tension: 0.4,
                    }]
                },
                options: {
                    responsive: true,
                    plugins: {
                        title: {
                            display: true,
                            text: "Orders Amount Over Time"
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: "Date"
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: "Amount (₹)"
                            }
                        }
                    }
                }
            });
        });
    </script> -->



    <script>
        document.getElementById('reportType').addEventListener('change', function () {
            const reportType = document.getElementById('reportType').value;
            const customDateRange = document.getElementById('customDateRange');
            customDateRange.style.display = reportType === 'custom' ? 'block' : 'none';
        });
    
        document.getElementById('generateReport').addEventListener('click', function () {
            const reportType = document.getElementById('reportType').value;
            const startDate = document.getElementById('startDate').value;
            const endDate = document.getElementById('endDate').value;
            const downloadFormat = document.getElementById('downloadFormat').value;
    
            if (reportType === 'custom' && new Date(endDate) < new Date(startDate)) {
                alert('End date cannot be before start date.');
                return;
            }
    
            fetch('/admin/generateReport', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ reportType, startDate, endDate, downloadFormat }),
            })
                .then((response) => {
                    if (!response.ok) {
                        throw new Error('Failed to generate report.');
                    }
    
                    const contentDisposition = response.headers.get('Content-Disposition');
                    const fileName = contentDisposition.split('filename=')[1].replace(/"/g, '');
                    return response.blob().then((blob) => ({ blob, fileName }));
                })
                .then(({ blob, fileName }) => {
                    const url = window.URL.createObjectURL(blob);
                    const a = document.createElement('a');
                    a.href = url;
                    a.download = fileName;
                    document.body.appendChild(a);
                    a.click();
                    a.remove();
                })
                .catch((error) => {
                    console.error('Error generating report:', error);
                    alert('There was an error generating the report. Please try again.');
                });
        });
    </script>
    
    <!-- <script>
        document.addEventListener('DOMContentLoaded', async() => {

// Initial chart setup (assuming you have initial data for today)
// const rawOrderData = `<%- orderData %>`;  
try {
    const orderData = JSON.parse(rawOrderData);
    console.log('Order data is:', orderData);

    // Now you can safely use orderData for further processing
    if (!Array.isArray(orderData) || orderData.length === 0) {
        console.warn('No orders data available for today.');
        return;
    }

    // Example: Displaying order details
    orderData.forEach(order => {
        console.log('Order ID:', order._id);
        console.log('Total Price:', order.totalPrice);
        
    });

    const labels = orderData.map(order => new Date(order.dateOrdered).toLocaleTimeString());
    const amounts = orderData.map(order => order.totalPrice);

    const ctx = document.getElementById('orderChart').getContext('2d');
    const orderChart = new Chart(ctx, {
        type: 'bar', // You can also use 'bar', 'pie', 'doughnut', etc.
        data: {
            labels: labels,
            datasets: [{
                label: 'Order Amounts',
                data: amounts,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });

    // category wise chart
    const rawOrderData = `<%- JSON.stringify(orderData) %>`;
const categoryLabels = `<%- JSON.stringify(categoryLabels) %>`;
const categorySales = `<%- JSON.stringify(categorySales) %>`;

    const context = document.getElementById('categoryChart').getContext('2d');
    const categoryChart = new Chart(context, {
        type: 'bar', // You can also use 'bar', 'pie', 'doughnut', etc.
        data: {
            labels: JSON.parse(categoryLabels),
            datasets: [{
                label: 'category sales',
                data: JSON.parse(categorySales),
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
} catch (error) {
    console.error('Error parsing order data:', error);
}
});



// function to update the chart
const timeIntervalSelect = document.getElementById('timeIntervalSelect');
const dateSelect = document.getElementById('dateSelect');
const monthSelect = document.getElementById('monthSelect');
const yearSelect = document.getElementById('yearSelect');

// Show and hide input fields based on selected interval
timeIntervalSelect.addEventListener('change', (event) => {
const selectedOption = event.target.value;
document.getElementById('dateInput').style.display = selectedOption === 'day' ? 'block' : 'none';
document.getElementById('monthInput').style.display = selectedOption === 'month' ? 'block' : 'none';
document.getElementById('yearInput').style.display = selectedOption === 'year' ? 'block' : 'none';
});

    </script> -->

 <script>
    document.addEventListener('DOMContentLoaded', async () => {
        const rawOrderData = `<%- JSON.stringify(orderData) %>`;
        // const categoryLabels = JSON.parse(`<%- JSON.stringify(categoryLabels) %>`);
    const categorySales = JSON.parse(`<%- JSON.stringify(categorySales) %>`);
    // console.log(categoryLabels,"ROW DATA")
    try {
        const orderData =[rawOrderData];
        if (!orderData || !Array.isArray(orderData) || orderData.length === 0) {
            console.warn('No orders data available.');
            return;
        }

        // Order chart
        // const labels = orderData.map(order => new Date(order?.createdAt).toLocaleTimeString());
        // const labels = orderData.map(order => console.log(order),"thisi ");
        let parsedOrderData = Array.isArray(orderData) ? orderData : JSON.parse(orderData);

const labels = parsedOrderData.map(order => {
    const createdAt = order?.createdAt;
    return createdAt ? new Date(createdAt).toLocaleTimeString() : 'Unknown Time';
});
        console.log(labels,"this is the labels")

        const amounts = orderData.map(order => order.totalPrice);

        const ctx = document.getElementById('orderChart').getContext('2d');
        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Order Amounts',
                    data: amounts,
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    borderColor: 'rgba(75, 192, 192, 1)',
                    borderWidth: 1
                }]
            },
            options: {
                scales: {
                    y: {
                        beginAtZero: true
                    }
                }
            }
        });

        // Category chart
        // const context = document.getElementById('categoryChart').getContext('2d');
        // new Chart(context, {
        //     type: 'bar',
        //     data: {
        //         labels: categoryLabels,
        //         datasets: [{
        //             label: 'Category Sales',
        //             data: categorySales,
        //             backgroundColor: 'rgba(75, 192, 192, 0.2)',
        //             borderColor: 'rgba(75, 192, 192, 1)',
        //             borderWidth: 1
        //         }]
        //     },
        //     options: {
        //         scales: {
        //             y: {
        //                 beginAtZero: true
        //             }
        //         }
        //     }
        // });
    } catch (error) {
        console.error('Error parsing order data:', error);
    }
});

</script> 
    
<!-- <script>
    document.addEventListener('DOMContentLoaded', () => {
    const orderData = `<%= JSON.stringify(orderData) %>`;  // Ensure this has valid data

    if (!orderData || !Array.isArray(orderData) || orderData.length === 0) {
        console.warn('No orders data available.');
        return;
    }

    const labels = orderData.map(order => new Date(order?.createdAt).toLocaleTimeString());
    const amounts = orderData.map(order => order.totalPrice);

    const ctx = document.getElementById('orderChart').getContext('2d');
    new Chart(ctx, {
        type: 'bar',
        data: {
            labels: labels,
            datasets: [{
                label: 'Order Amounts',
                data: amounts,
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        }
    });
});

</script> -->
    </body>

    </html>
    _---------------------------------------------adminIndex...------------------------------------------------------