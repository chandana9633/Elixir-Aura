
    <style>
        * {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    color: #333;
}

.container {
    max-width: 600px;
    margin: 50px auto;
    padding: 20px;
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
}

h1 {
    text-align: center;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
}

label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
}

input[type="text"], 
input[type="number"], 
textarea, 
select, 
input[type="file"] {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

textarea {
    resize: vertical;
    height: 100px;
}

.submit-btn {
    display: inline-block;
    width: 100%;
    padding: 10px;
    background-color: #166bcd;
    color: white;
    font-size: 16px;
    font-weight: bold;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.submit-btn:hover {
    background-color: #218838;
}


.image-upload-section {
    margin: 20px 0;
    padding: 20px;
    border: 1px solid #ddd;
    border-radius: 8px;
}

.existing-images {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
    margin-bottom: 30px;
}

.image-container {
    position: relative;
    width: 100%;
    aspect-ratio: 1;
}

.image-container img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 8px;
}

.remove-btn {
    position: absolute;
    top: 10px;
    right: 10px;
    background: #ff4444;
    color: white;
    border: none;
    padding: 5px 10px;
    border-radius: 4px;
    cursor: pointer;
    transition: background 0.3s ease;
}

.remove-btn:hover {
    background: #cc0000;
}

.new-images-upload {
    margin-top: 20px;
}

.file-input-container {
    border: 2px dashed #ccc;
    padding: 20px;
    text-align: center;
    border-radius: 8px;
    background: #f9f9f9;
}

.preview-container {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
    margin-top: 20px;
}

.preview-image {
    width: 100%;
    aspect-ratio: 1;
    object-fit: cover;
    border-radius: 4px;
}

#cropModal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0,0,0,0.8);
    z-index: 1000;
}

.crop-container {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: white;
    padding: 20px;
    border-radius: 8px;
    max-width: 90%;
    max-height: 90%;
}

.crop-buttons {
    margin-top: 15px;
    text-align: right;
}

    </style>

    <%- include('../layout/admin/adminHeader') %> 

    <div class="container">
        <h1>Edit Product</h1>
        <form  id="editProForm" action="/admin/editProduct/<%=product._id%> " method="post" enctype="multipart/form-data" >
            <div class="form-group">
                <label for="name">Product Name</label>
                <input type="text" id="name" name="name" value="<%=product.name%>">
                <div class="error-message text-danger" id="name-error"></div>
            </div>

            
            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description"></textarea>
                <!-- <input type="te" id="description" name="description" value="<%= product.description %>"> -->
                <div class="error-message text-danger" id="discription-error"></div>

            </div>

             <div class="form-group">
                <label for="category">Category</label>
                <select id="productCategory" name="category" class="form-select">
                    <%categories.forEach(category=>{%>
                        <option value="<%= category._id %>" <%= product.category && product.category._id.toString() === category._id.toString() ? 'selected' : '' %>>
                            <%= category.name %>
                        </option>
                        <%})%>
                    
                   
                </select>
                <div class="error-message text-danger" id="category-error"></div>
            </div>

            
            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" id="price" name="price" value="<%=product.price%>">
                <div class="error-message text-danger" id="price-error"></div>

            </div>

            <div class="form-group">
                <label for="stock">Stock</label>
                <input type="number" id="stock" name="stock" value="<%=product.stock%>">
                <div class="error-message text-danger" id="stock-error"></div>

            </div>


            <div class="form-group">
                <label for="price">Specification</label>
                <input type="text" id="specification" name="specification"  value="<%=product.specification%>">
                <div class="error-message text-danger" id="specification-error"></div>

            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description"><%= product.description %></textarea>
                <div class="error-message text-danger" id="description-error"></div>
            </div>
            
            <div class="image-upload-section">
                <!-- Existing Images -->
                <h3>Existing Images:</h3>
                <div class="existing-images">
                    <% product.image.forEach((img, index) => { %>
                        <div class="image-container">
                            <img src="/uploads/<%= img %>" alt="Product Image <%= index + 1 %>">
                            <button type="button" class="remove-btn" onclick="removeExistingImage('<%= img %>')">Remove</button>
                        </div>
                    <% }) %>
                </div>
            
                <!-- New Images Upload -->
                <div class="new-images-upload">
                    <h3>Add New Images (Minimum 3)</h3>
                    <div class="file-input-container">
                        <input type="file" id="images" name="images" accept="image/*" multiple onchange="handleImageSelect(event)">
                        <p><small>Hold down Ctrl (Windows) or Command (Mac) to select multiple files.</small></p>
                    </div>
                    <div id="imagePreviewContainer" class="preview-container"></div>
                </div>
            </div>
            
            <!-- Cropping Modal -->
            <div id="cropModal">
                <div class="crop-container">
                    <img id="cropImage" style="max-width: 100%;">
                    <div class="crop-buttons">
                        <button onclick="applyCrop()" class="submit-btn">Apply Crop</button>
                        <button onclick="cancelCrop()" class="submit-btn" style="background: #666;">Cancel</button>
                    </div>
                </div>
            </div>
            <button type="submit" class="submit-btn" id="submit-form">Edit Product</button>
        </form>
    </div>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>


    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const submitForm = document.getElementById('submit-form');
            const imageInput = document.getElementById('images');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const imagePreviews = document.getElementById('imagePreviews');
            const cropImage = document.getElementById('cropImage');
            const imageError = document.getElementById('image-error');
    
            let cropper;
            let currentImageIndex = null;
            let croppedImageData = [];
            let removedImages = []; // Store removed images
    
            // Existing images container
            const existingImages = document.querySelectorAll('.existing-image');
            existingImages.forEach((imgElement, index) => {
                const removeButton = document.createElement('button');
                removeButton.innerText = 'Remove';
                removeButton.classList.add('btn', 'btn-danger', 'btn-sm');
                removeButton.style.marginLeft = '5px';
    
                // Remove image from the DOM and add it to removedImages array
                removeButton.addEventListener('click', () => {
                    imgElement.remove();
                    removedImages.push(imgElement.getAttribute('data-image-id')); // Store image ID
                });
    
                imgElement.parentNode.insertBefore(removeButton, imgElement.nextSibling);
            });
    
            submitForm.addEventListener('click', function (event) {
                event.preventDefault(); // Prevent default form submission
                let valid = validateForm(); // Validate form inputs
    
                if (!valid) return; // Exit if the form is invalid
    
                const formData = new FormData();
                appendFormData(formData); // Append form data
    
                // Append cropped new images to the form data
                croppedImageData.forEach((blob, index) => {
                    formData.append('newImages', blob, `image${index}.jpg`);
                });
    
                // Append removed image IDs
                removedImages.forEach(imageId => {
                    formData.append('removedImages[]', imageId);
                });
    
                fetch('/admin/editProduct', {
                    method: "POST",
                    body: formData,
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(result => {
                            throw new Error(result.message || 'An error occurred');
                        });
                    } else {
                        window.location.href = '/admin/products';
                    }
                })
                .catch(error => {
                    console.error('Error updating product:', error.message);
                    Swal.fire({
                        icon: 'error',
                        title: 'Oops...',
                        text: error.message || 'An error occurred',
                        confirmButtonText: 'OK'
                    });
                });
            });
    
            imageInput.addEventListener('change', function (event) {
                const files = event.target.files; // Get the selected files
                handleImageInput(files); // Handle the selected files
            });
    
            function handleImageInput(files) {
                // Ensure maximum image upload limit is adhered to
                if (files.length > 3) {
                    imageError.innerText = 'You can upload a maximum of 3 images';
                    imageInput.value = ''; // Reset input
                    imagePreviewContainer.style.display = 'none'; // Hide preview container
                    imagePreviews.innerHTML = ''; // Clear previews
                    return;
                }
    
                imageError.innerText = ''; // Clear image error message
                imagePreviewContainer.style.display = 'block'; // Show preview container
                imagePreviews.innerHTML = ''; // Clear existing previews
                croppedImageData = []; // Reset cropped image data array
    
                Array.from(files).forEach((file, index) => {
                    const reader = new FileReader();
                    reader.onload = function (e) {
                        const img = document.createElement('img');
                        img.src = e.target.result;
                        img.style.maxWidth = '100px';
                        img.style.margin = '5px';
                        img.style.cursor = 'pointer';
                        img.setAttribute('data-index', index); // Set data index for later reference
    
                        croppedImageData[index] = file; // Store the file
    
                        img.addEventListener('click', function () {
                            cropImage.src = e.target.result; // Set image source for cropping
                            currentImageIndex = index; // Set current image index for cropping
    
                            if (cropper) {
                                cropper.destroy(); // Destroy previous cropper instance if exists
                            }
    
                            cropper = new Cropper(cropImage, {
                                aspectRatio: 1, // Set aspect ratio for cropping
                                viewMode: 1,
                                autoCropArea: 1,
                            });
    
                            document.getElementById('cropModal').style.display = 'block'; // Show cropping modal
                        });
    
                        imagePreviews.appendChild(img); // Append image to preview container
                    };
                    reader.readAsDataURL(file); // Read the file as a data URL
                });
            }
    
            document.getElementById('applyCrop').addEventListener('click', function () {
                if (cropper && currentImageIndex !== null) {
                    cropper.getCroppedCanvas().toBlob(function (blob) {
                        croppedImageData[currentImageIndex] = blob; // Store the cropped image
    
                        const previewImg = document.querySelector(`[data-index="${currentImageIndex}"]`);
                        previewImg.src = URL.createObjectURL(blob); // Update preview with cropped image
    
                        cropper.destroy(); // Destroy cropper instance
                        cropper = null; // Reset cropper
                        currentImageIndex = null; // Reset current image index
                        document.getElementById('cropModal').style.display = 'none'; // Hide cropping modal
                    });
                }
            });
    
            document.getElementById('cancelCrop').addEventListener('click', function () {
                cropper.destroy(); // Destroy cropper instance
                cropper = null; // Reset cropper
                currentImageIndex = null; // Reset current image index
                document.getElementById('cropModal').style.display = 'none'; // Hide cropping modal
            });
    
            function validateForm() {
                let valid = true;
                clearErrorMessages(); // Clear previous error messages
    
                // Validate each field here...
                const name = document.querySelector('input[name="name"]').value.trim();
                const description = document.querySelector('textarea[name="description"]').value.trim();
                const category = document.querySelector('#productCategory').value.trim();
                const price = parseFloat(document.querySelector('input[name="price"]').value.trim());
                const stock = parseInt(document.querySelector('input[name="stock"]').value.trim());
                const specification = document.querySelector('input[name="specification"]').value.trim();
                const discountprice = parseFloat(document.querySelector('input[name="discountprice"]').value.trim());
                const expirydate = document.querySelector('#date').value;
    
                if (!name) {
                    valid = false;
                    document.getElementById('name-error').innerText = 'Product name required';
                }
                // Add additional validation conditions...
    
                return valid; // Return whether the form is valid or not
            }
    
            function clearErrorMessages() {
                // Clear all error messages
                document.getElementById('name-error').innerText = "";
                document.getElementById('description-error').innerText = "";
                document.getElementById('category-error').innerText = "";
                document.getElementById('price-error').innerText = "";
                document.getElementById('stock-error').innerText = "";
                document.getElementById('specification-error').innerText = "";
                document.getElementById('discount-error').innerText = "";
                document.getElementById('expiry-error').innerText = "";
                imageError.innerText = ""; // Clear image error message
            }
    
            function appendFormData(formData) {
                // Append form data
                formData.append('name', document.querySelector('input[name="name"]').value.trim());
                formData.append('description', document.querySelector('textarea[name="description"]').value.trim());
                formData.append('category', document.querySelector('#productCategory').value.trim());
                formData.append('price', parseFloat(document.querySelector('input[name="price"]').value.trim()));
                formData.append('stock', parseInt(document.querySelector('input[name="stock"]').value.trim()));
                formData.append('specification', document.querySelector('input[name="specification"]').value.trim());
                formData.append('discountprice', parseFloat(document.querySelector('input[name="discountprice"]').value.trim()));
                // Append any other necessary fields...
            }
        });
    </script>
    
    

</body>
</html>


<!-- <%-include('../layout/user/indexHeader')%>	 -->


<div class="col-lg-6">
    <div class="product-content">
        <h2><%= pro.name %></h2>	

        <div class="pc-meta">
            <h5>₹<%= pro.discountprice || pro.price %></h5>
            <% if (pro.discountprice) { %>
                <span class="original-price">₹<%= pro.price %></span>
            <% } %>
        </div>
        <p><%= pro.description %></p>
        <ul class="tags">
            <li><span>Category :</span> <%= pro.category.name %></li>
            
        </ul>
        <form action="/addCart" method="post">
            <input type="hidden" name="productId" value="<%= pro._id %>">
            <button type="submit" class="primary-btn pc-btn">Add to cart</button>
        </form>
    </div>
</div>









<div class="col-lg-6">
    <div class="product-content">
        <h2>Dotted Blue Shirt</h2>
        <div class="pc-meta">
            <h5>$22.90</h5>
            <div class="rating">
                <i class="fa fa-star"></i>
                <i class="fa fa-star"></i>
                <i class="fa fa-star"></i>
                <i class="fa fa-star"></i>
                <i class="fa fa-star"></i>
            </div>
        </div>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut
            labore et dolore magna aliqua. Quis ipsum suspendisse ultrices gravida. Risus commodo
            viverra maecenas accumsan lacus vel facilisis.</p>
        <ul class="tags">
            <li><span>Category :</span> Men’s Wear</li>
            <li><span>Tags :</span> man, shirt, dotted, elegant, cool</li>
        </ul>
        <div class="product-quantity">
            <div class="pro-qty">
                <input type="text" value="1">
            </div>
        </div>
        <a href="#" class="primary-btn pc-btn">Add to cart</a>
        <ul class="p-info">
            <li>Product Information</li>
            <li>Reviews</li>
            <li>Product Care</li>
        </ul>
    </div>
</div>