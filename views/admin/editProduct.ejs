<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        color: #333;
    }

    .container {
        max-width: 600px;
        margin: 50px auto;
        padding: 20px;
        background-color: #fff;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
        text-align: center;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
    }

    input[type="text"],
    input[type="number"],
    textarea,
    select,
    input[type="file"] {
        width: 100%;
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    textarea {
        resize: vertical;
        height: 100px;
    }

    .submit-btn {
        display: inline-block;
        width: 100%;
        padding: 10px;
        background-color: #343535;;
        color: white;
        font-size: 16px;
        font-weight: bold;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    .submit-btn:hover {
        background-color:  #737576;
    }


    .image-upload-section {
        margin: 20px 0;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 8px;
    }

    .existing-images {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 20px;
        margin-bottom: 30px;
    }

    .image-container {
        position: relative;
        width: 100%;
        aspect-ratio: 1;
    }

    .image-container img {
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 8px;
    }

    .remove-btn {
        position: absolute;
        top: 10px;
        right: 10px;
        background: #ff4444;
        color: white;
        border: none;
        padding: 5px 10px;
        border-radius: 4px;
        cursor: pointer;
        transition: background 0.3s ease;
    }

    .remove-btn:hover {
        background: #cc0000;
    }

    .new-images-upload {
        margin-top: 20px;
    }

    .file-input-container {
        border: 2px dashed #ccc;
        padding: 20px;
        text-align: center;
        border-radius: 8px;
        background: #f9f9f9;
    }

    .preview-container {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 15px;
        margin-top: 20px;
    }

    .preview-image {
        width: 100%;
        aspect-ratio: 1;
        object-fit: cover;
        border-radius: 4px;
    }

    #cropModal {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 1000;
    }

    .crop-container {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: white;
        padding: 20px;
        border-radius: 8px;
        max-width: 90%;
        max-height: 90%;
    }

    .crop-buttons {
        margin-top: 15px;
        text-align: right;
    }
</style>

<%- include('../layout/admin/adminHeader') %>

    <div class="container">
        <h1>Edit Product</h1>

        <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


        <form id="editProForm"  enctype="multipart/form-data">
            <div class="form-group">
                <label for="name">Product Name</label>
                <input type="text" id="name" name="name" value="<%= product.name %>">
                <div class="error-message text-danger" id="name-error"></div>
            </div>

            <div class="form-group">
                <label for="description">Description</label>
                <textarea id="description" name="description"><%= product.description %></textarea>
                <div class="error-message text-danger" id="description-error"></div>
            </div>

            <div class="form-group">
                <label for="category">Category</label>
                <select id="productCategory" name="category" class="form-select">
                    <% categories.forEach(category=> { %>
                        <option value="<%= category._id %>" <%=product.category &&
                            product.category._id.toString()===category._id.toString() ? 'selected' : '' %>>
                            <%= category.name %>
                        </option>
                        <% }) %>
                </select>
                <div class="error-message text-danger" id="category-error"></div>
            </div>

            <div class="form-group">
                <label for="price">Price</label>
                <input type="number" id="price" name="price" value="<%=product.price%>">
                <div class="error-message text-danger" id="price-error"></div>
            </div>

            <div class="form-group">
                <label for="stock">Stock</label>
                <input type="hidden" id="imgId" value="<%=  product._id  %>">
                <input type="number" id="stock" name="stock" value="<%= product.stock %>">
                <div class="error-message text-danger" id="stock-error"></div>
            </div>

            <div class="form-group">
                <label for="specification">Specification</label>
                <input type="text" id="specification" name="specification" value="<%=product.specification%>">
                <div class="error-message text-danger" id="specification-error"></div>
            </div>


            <div class="form-group">
                <label for="discountprice">Discount Price</label>
                <input type="number" id="discountprice" name="discountprice" value="<%=product.discountprice%>">
                <div class="error-message text-danger" id="discount-error"></div>
            </div>

            <div class="image-upload-section">
                <h3>Existing Images:</h3>
                <<div class="existing-images">
                    <% product.image.forEach((img, index) => { %>
                        <div class="image-container" data-image="<%= img %>">
                            <img src="/uploads/<%= img %>" alt="Product Image <%= index + 1 %>">
                           
                            <button type="button" class="remove-btn" onclick="removeExistingImage('<%= img %>')">Remove</button>
                        </div>
                    <% }); %>
                </div>
                <input type="hidden" id="removedImagesHidden" name="removedImages">
                
                <div class="new-images-upload">
                    <h3>Add New Images (Minimum 3)</h3>
                    <input type="file" id="images" name="images" accept="image/*" multiple>
                    <div id="imagePreviewContainer" class="preview-container"></div>
                </div>
            </div>

            <button type="submit" class="submit-btn" id="submit-form">Edit Product</button>
        </form>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const imageInput = document.getElementById('images');
            const imagePreviewContainer = document.getElementById('imagePreviewContainer');
            const cropModal = document.getElementById('cropModal');
            const cropImage = document.getElementById('cropImage');
            const saveCroppedImageBtn = document.getElementById('saveCroppedImage');
            const cancelCropBtn = document.getElementById('cancelCrop');
            let cropper;
            let currentImagePreview;
    
            document.getElementById('editProForm').addEventListener('submit', async (e) => {
                e.preventDefault();
    
                const name = document.getElementById('name').value;
                const description = document.getElementById('description').value;
                const category = document.getElementById('productCategory').value;
                const price = document.getElementById('price').value;
                const stock = document.getElementById('stock').value;
                const specification = document.getElementById('specification').value;
                const discountprice = document.getElementById('discountprice').value;
    
                const formData = new FormData();
                formData.append('name', name);
                formData.append('description', description);
                formData.append('category', category);
                formData.append('price', price);
                formData.append('stock', stock);
                formData.append('specification', specification);
                formData.append('discountprice', discountprice);
    
                const imageFiles = imageInput.files;
                for (let i = 0; i < imageFiles.length; i++) {
                    formData.append('image', imageFiles[i]); 
                }
    
                try {
                    const response = await fetch(`/admin/editProduct/<%=product._id%>`, {
                        method: 'POST',
                        body: formData
                    });
    
                    const result = await response.json();
    
                    if (response.ok) {
                        Swal.fire({
                            title: 'Good job!',
                            text: 'Product updated successfully!',
                            icon: 'success',
                            confirmButtonText: 'Cool'
                        }).then(() => {
                            window.location.href = '/admin/products';
                        });
                    } else {
                        Swal.fire({
                            title: 'Oops...',
                            text: result.message||'Error updating product. Please try again.',
                            icon: 'error',
                            confirmButtonText: 'Retry'
                        });
                        console.error(result.error);
                    }
                } catch (error) {
                    Swal.fire({
                        title: 'Oops...',
                        text: 'Something went wrong! Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Retry'
                    });
                    console.error(error);
                }
            });
    
            // Image upload and preview
            imageInput.addEventListener('change', function () {
                const files = Array.from(this.files);
                if (files.length + document.querySelectorAll('.existing-images .image-container').length > 3) {
                    Swal.fire({
                        title: 'Limit Exceeded',
                        text: 'You can only upload up to 3 images.',
                        icon: 'warning',
                        confirmButtonText: 'OK'
                    });
                    this.value = '';
                    return;
                }
                files.forEach(file => previewImage(file));
            });
    
            function previewImage(file) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imageContainer = document.createElement('div');
                    imageContainer.className = 'image-preview-container mb-3';
                    imageContainer.innerHTML = `
                        <img src="${e.target.result}" class="preview-image">
                        <button type="button" class="btn btn-danger remove-btn">Remove</button>
                        <button type="button" class="btn btn-primary crop-btn">Crop</button>
                    `;
                    imagePreviewContainer.appendChild(imageContainer);
    
                    imageContainer.querySelector('.crop-btn').addEventListener('click', () => openCropModal(imageContainer.querySelector('img')));
                    
                    imageContainer.querySelector('.remove-btn').addEventListener('click', () => removeImage(imageContainer));
                };
                reader.readAsDataURL(file);
            }
    
            function openCropModal(image) {
                cropImage.src = image.src;
                cropModal.style.display = 'block';
                currentImagePreview = image;
    
                if (cropper) cropper.destroy();
                
                cropper = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 2,
                    autoCropArea: 1,
                    responsive: true
                });
            }
    
            saveCroppedImageBtn.addEventListener('click', function () {
                if (cropper) {
                    const canvas = cropper.getCroppedCanvas({ width: 300, height: 300 });
                    currentImagePreview.src = canvas.toDataURL();
                    cropper.destroy();
                    cropModal.style.display = 'none';
    
                    sendImageToBackend(canvas.toDataURL());
                }
            });
    
            cancelCropBtn.addEventListener('click', function () {
                if (cropper) cropper.destroy();
                cropModal.style.display = 'none';
            });
    
            function removeImage(imageContainer) {
                imagePreviewContainer.removeChild(imageContainer);
            }
    
            function sendImageToBackend(croppedImageData) {
                fetch('/upload-image', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        image: croppedImageData
                    })
                })
                .then(response => response.json())
                .then(data => {
                    console.log('Image uploaded successfully', data);
                    Swal.fire({
                        title: 'Good job!',
                        text: 'Image uploaded successfully!',
                        icon: 'success',
                        confirmButtonText: 'Awesome'
                    });
                })
                .catch(error => {
                    console.error('Error uploading image:', error);
                    Swal.fire({
                        title: 'Oops...',
                        text: 'Error uploading image. Please try again.',
                        icon: 'error',
                        confirmButtonText: 'Retry'
                    });
                });
            }
        });
    </script>
    

    <script>
        function removeExistingImage(img) {            
            let id=document.getElementById('imgId').value
                        
            fetch(`/admin/remove-image/${id}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ imageName: img })
            })
            .then(response => {
                if (!response.ok) throw new Error('Network response was not ok');
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    console.log(`Image ${img} successfully removed from server`);
                    const imageElement = document.querySelector(`[data-image="${img}"]`);
                    if (imageElement) {
                        imageElement.remove();
                    }
                } else {
                    console.error('Error removing image:', data.error);
                }
            })
            .catch(error => {
                console.error('Fetch error:', error.message);
            });
        }
    </script>
    
    </body>

    </html>